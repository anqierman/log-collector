<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.atguigu</groupId>
  <artifactId>log-collector</artifactId>
    <packaging>pom</packaging>
    <version>0.0.1-SNAPSHOT</version>
    <modules>
        <module>ETLInterceptor</module>
    </modules>

    <!--版本号统一-->
<properties>
    <slf4j.version>1.7.20</slf4j.version>
    <logback.version>1.0.7</logback.version>
</properties>

  <!-- ①解析JSON的框架FastJson
  	   ②日志记录框架： logback
  	   		log4j,log4j2,logback

  	   		logback是log4j的升级版，速度更快，性能更高，测试更充分！logback提供了
  	   		对SLF4J的支持，可以从log4j无缝切换到logback

  	   		区别：  log4j使用的log4j.properties作为配置文件
  	   			logback使用logback.xml作为配置文件

  	   		使用： 在配置文件中，可以定义三种组件
  	   			Logger:  日志的记录器，可以在Logger上定义日志的记录级别(INFO,WARN)
  	   			Appender： 负责将输出的信息，追加到目的地(文件，控制台，网络端口，数据库)
  	   			Layout:  输出的样式，每条信息都会格式化为指定的样式输出
  	   ③打包框架

   -->
<dependencies>
    <!--阿里巴巴开源json解析框架-->
    <dependency>
        <groupId>com.alibaba</groupId>
        <artifactId>fastjson</artifactId>
        <version>1.2.51</version>
    </dependency>

    <!--日志生成框架-->
    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-core</artifactId>
        <version>${logback.version}</version>
    </dependency>
    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>${logback.version}</version>
    </dependency>
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
        <scope>test</scope>
    </dependency>
</dependencies>

<!--编译打包插件-->
<build>
    <plugins>
    	<!-- 如果已经在Maven的全局配置中，配置了JDK编译的界别，这个插件可以省略 -->
        <!-- <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>2.3.2</version>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin> -->

        <!-- 在mvn:package阶段使用
        		maven-assembly-plugin可以将当前项目依赖的Jar中的字节码也打包！
        		默认的打包插件maven-jar-plugin，只会将自己写的代码打包，默认仓库中已经安装了所需的依赖！
        -->
        <plugin>
            <artifactId>maven-assembly-plugin </artifactId>
            <configuration>
                <descriptorRefs>
                    <descriptorRef>jar-with-dependencies</descriptorRef>
                </descriptorRefs>
                <archive>
                    <manifest>
                        <mainClass>com.atguigu.appclient.AppMain</mainClass>
                    </manifest>
                </archive>
            </configuration>
            <executions>
                <execution>
                    <id>make-assembly</id>
                    <phase>package</phase>
                    <goals>
                        <goal>single</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>
</project>